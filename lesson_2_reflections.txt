-What happens when you initialize a repository? Why do you need to do it?

Initializing a repository will create a .git hidden subfolder in the correspondent directory which will contain all the metadata related to it for Git. 

This will allow Git to keep track of the directory as a repository. If you don't do it Git will not keep track of it.

-How is the staging area different from the working directory and the repository? What value do you think it offers?

It's an intermediary between the working directory and the repository. It helps prepare what each commit will have so that it can contain exactly the desired files. 

-How can you use the staging area to make sure you have one commit per logical change?

With the staging area you can set up any combination of files as you wish in a commit so you can easily partition commits by logical changes.

-What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches make it possible to try changes without derailing the course of the development or modifying permanently files from the master branch. It allows parallel development.

For example, you can develop new features on your own branch while the master branch continues evolving and add your features in the end.

-How do the diagrams help you visualize the branch structure?

It's an easy to see graphical representation of the branching in a Git repository, showing every branch and the commits that belong to it. 

-What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

It results in a commit which contains the union of the two commits. We represent it that way because it has two parents consisting in the two commits that formed the merge.

-What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

Git's automatic merging can save a lot of time and effort obviously, yet it could go wrong or fail to work sometimes. 

On the other hand, manual mergeing is guaranteed to work considering the user is an expert on the issue or you can contact all the users that worked on the commits involved, yet this method is sure to take much more time and effort in the analysis involved.