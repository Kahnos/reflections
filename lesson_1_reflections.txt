-How did viewing a diff between two versions of a file help you see the bug that was introduced?

It shows only the differences between the files, narrowing the bug search.

-How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

It allows you to study the past of the software, analyzing why decisions were made in their respective time and context and learning from it. This way you can try out new ideas without the worry of breaking a software and the ability to restore to a previous version and test anything.

-What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

Manually choosing when to create a commit poses the possibility of human error but helps maintaint logic in the commits because each one of them should have a clear purpose and be simple enough to understand. This guarantees that each version has functional code (or should), which makes it easier to roll back changes.

Manual commits can contain a comment to keep track of every modification.

Non-manual commits can create many versions that aren't complete or don't compile, cluttering the history of commits. 

-Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

Because a group of files can be related, thus needing them together. A good example is source code in software development. 

--How can you use the commands git log and git diff to view the history of files?

Git log shows a summary of all the commits from newest to oldest, which is useful when looking for a specific modification. Git diff compares two commits to see what was modified from one version to another.

-How might using version control make you more confident to make changes that could break something?

Because it makes possible making changes and reverting them back easily while maintaining a history of all modifications, effectively making it "impossible" to break a software completely.

This causes a more risk taking attitude towards the code.

-Now that you have your workspace set up, what do you want to try using Git for?

Keep track of all my projects and try new ideas without worry.